{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./node_modules/charenc/charenc.js","webpack:///./src/tc_vod.ts","webpack:///./src/uploader.ts","webpack:///./node_modules/is/index.js","webpack:///./node_modules/sha1/sha1.js","webpack:///./node_modules/buffer/index.js","webpack:///(webpack)/buildin/global.js","webpack:///./node_modules/base64-js/index.js","webpack:///./node_modules/ieee754/index.js","webpack:///./node_modules/isarray/index.js","webpack:///./node_modules/crypt/crypt.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","charenc","utf8","stringToBytes","str","bin","unescape","encodeURIComponent","bytesToString","bytes","decodeURIComponent","escape","length","push","charCodeAt","String","fromCharCode","join","__assign","this","assign","arguments","apply","uploader_1","TcVod","params","getSignature","upload","default","is","sha1","Uploader","progress","hashProgress","cosSuccess","allowAudio","videoTypes","audioTypes","imageTypes","validateInitParams","videoFile","videoName","coverFile","validateUploadParams","setStorage","getStorageNum","cname","localStorage","setItem","e","getStorage","result","getItem","delStorage","removeItem","num","reg","test","fn","v","toString","allowVideoTypes","concat","indexOf","videoInfo","type","toUpperCase","console","log","genFileInfo","lastDotIndex","lastIndexOf","string","substring","toLowerCase","size","storageName","coverName","coverLastDotIndex","coverInfo","done","symbolValueOf","bigIntValueOf","objProto","owns","toStr","valueOf","BigInt","isActualNaN","NON_HOST_TYPES","boolean","number","undefined","base64Regex","hexRegex","a","defined","empty","equal","other","getTime","hosted","host","instance","constructor","nil","undef","args","isStandardArguments","isOldArguments","array","arraylike","callee","Array","isArray","bool","isFinite","Boolean","Number","date","valid","isNaN","element","HTMLElement","nodeType","error","window","alert","infinite","Infinity","decimal","divisibleBy","isDividendInfinite","isDivisorInfinite","isNonZeroNumber","integer","maximum","others","TypeError","len","minimum","nan","even","odd","ge","gt","le","lt","within","start","finish","primitive","hash","setInterval","regexp","base64","hex","symbol","bigint","Buffer","crypt","api","message","options","digestbytes","wordsToBytes","isBuffer","slice","bytesToWords","w","H0","H1","H2","H3","H4","b","j","asBytes","asString","bytesToHex","_blocksize","_digestsize","global","ieee754","kMaxLength","TYPED_ARRAY_SUPPORT","createBuffer","that","RangeError","Uint8Array","__proto__","arg","encodingOrOffset","Error","allocUnsafe","from","ArrayBuffer","byteOffset","byteLength","fromArrayLike","fromArrayBuffer","encoding","isEncoding","actual","write","fromString","obj","checked","copy","buffer","val","data","fromObject","assertSize","isView","loweredCase","utf8ToBytes","base64ToBytes","swap","bidirectionalIndexOf","dir","arrayIndexOf","arr","indexSize","arrLength","valLength","read","buf","readUInt16BE","foundIndex","found","hexWrite","offset","remaining","strLen","parsed","parseInt","substr","utf8Write","blitBuffer","asciiWrite","byteArray","asciiToBytes","latin1Write","base64Write","ucs2Write","units","hi","lo","utf16leToBytes","base64Slice","end","fromByteArray","utf8Slice","Math","min","res","secondByte","thirdByte","fourthByte","tempCodePoint","firstByte","codePoint","bytesPerSequence","codePoints","MAX_ARGUMENTS_LENGTH","decodeCodePointsArray","SlowBuffer","alloc","INSPECT_MAX_BYTES","foo","subarray","typedArraySupport","poolSize","_augment","species","configurable","fill","allocUnsafeSlow","_isBuffer","compare","x","y","list","pos","swap16","swap32","swap64","hexSlice","asciiSlice","latin1Slice","utf16leSlice","equals","inspect","max","match","target","thisStart","thisEnd","thisCopy","targetCopy","includes","toJSON","_arr","ret","out","toHex","checkOffset","ext","checkInt","objectWriteUInt16","littleEndian","objectWriteUInt32","checkIEEE754","writeFloat","noAssert","writeDouble","newBuf","sliceLen","readUIntLE","mul","readUIntBE","readUInt8","readUInt16LE","readUInt32LE","readUInt32BE","readIntLE","pow","readIntBE","readInt8","readInt16LE","readInt16BE","readInt32LE","readInt32BE","readFloatLE","readFloatBE","readDoubleLE","readDoubleBE","writeUIntLE","writeUIntBE","writeUInt8","floor","writeUInt16LE","writeUInt16BE","writeUInt32LE","writeUInt32BE","writeIntLE","limit","sub","writeIntBE","writeInt8","writeInt16LE","writeInt16BE","writeInt32LE","writeInt32BE","writeFloatLE","writeFloatBE","writeDoubleLE","writeDoubleBE","targetStart","set","code","INVALID_BASE64_RE","leadSurrogate","toByteArray","trim","replace","stringtrim","base64clean","src","dst","g","Function","b64","lens","getLens","validLen","placeHoldersLen","tmp","Arr","_byteLength","curByte","revLookup","uint8","extraBytes","parts","len2","encodeChunk","lookup","output","isLE","mLen","nBytes","eLen","eMax","eBias","nBits","NaN","rt","abs","LN2","base64map","rotl","rotr","endian","randomBytes","random","words","hexToBytes","bytesToBase64","triplet","charAt","imod4"],"mappings":"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","file":"tc_vod.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 1);\n","var charenc = {\n  // UTF-8 encoding\n  utf8: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      return charenc.bin.stringToBytes(unescape(encodeURIComponent(str)));\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      return decodeURIComponent(escape(charenc.bin.bytesToString(bytes)));\n    }\n  },\n\n  // Binary encoding\n  bin: {\n    // Convert a string to a byte array\n    stringToBytes: function(str) {\n      for (var bytes = [], i = 0; i < str.length; i++)\n        bytes.push(str.charCodeAt(i) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a string\n    bytesToString: function(bytes) {\n      for (var str = [], i = 0; i < bytes.length; i++)\n        str.push(String.fromCharCode(bytes[i]));\n      return str.join('');\n    }\n  }\n};\n\nmodule.exports = charenc;\n","\"use strict\";\nvar __assign = (this && this.__assign) || function () {\n    __assign = Object.assign || function(t) {\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\n            s = arguments[i];\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n                t[p] = s[p];\n        }\n        return t;\n    };\n    return __assign.apply(this, arguments);\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar uploader_1 = require(\"./uploader\");\nvar TcVod = /** @class */ (function () {\n    function TcVod(params) {\n        this.getSignature = params.getSignature;\n    }\n    TcVod.prototype.upload = function (params) {\n        params = __assign({ getSignature: this.getSignature }, params);\n        var uploader = new uploader_1.default(params);\n        return uploader;\n    };\n    return TcVod;\n}());\nexports.default = TcVod;\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar is = require(\"is\");\nvar sha1 = require(\"sha1\");\nfunction isFile(v) {\n    return Object.prototype.toString.call(v) == \"[object File]\";\n}\nvar Uploader = /** @class */ (function () {\n    function Uploader(params) {\n        this.progress = function () { };\n        this.hashProgress = function () { };\n        this.cosSuccess = function () { };\n        this.allowAudio = false;\n        // video types\n        this.videoTypes = [\n            'WMV', 'WM', 'ASF', 'ASX',\n            'RM', 'RMVB', 'RA', 'RAM',\n            'MPG', 'MPEG', 'MPE', 'VOB', 'DAT',\n            'MOV', '3GP', 'MP4', 'MP4V', 'M4V', 'MKV', 'AVI', 'FLV', 'F4V' // other types\n        ];\n        // audio types\n        this.audioTypes = ['MP3', 'WMA', 'WAV', 'ASF', 'AU', 'SND', 'RAW', 'AFC', 'ACC'];\n        // pic types\n        this.imageTypes = [\n            'JPG', 'JPEG', 'JPE',\n            'PSD',\n            'SVG', 'SVGZ',\n            'TIFF', 'TIF',\n            'BMP', 'GIF', 'PNG'\n        ];\n        this.validateInitParams(params);\n        this.videoFile = params.videoFile;\n        this.getSignature = params.getSignature;\n        this.progress = params.progress;\n        this.hashProgress = params.hashProgress;\n        this.cosSuccess = params.cosSuccess;\n        this.allowAudio = params.allowAudio;\n        this.videoName = params.videoName;\n        this.coverFile = params.coverFile;\n        this.validateUploadParams();\n    }\n    // set storage\n    Uploader.prototype.setStorage = function (name, value) {\n        if (this.getStorageNum() > 5) {\n            return;\n        }\n        var cname = 'webugc_' + sha1(name);\n        try {\n            localStorage.setItem(cname, value);\n        }\n        catch (e) { }\n    };\n    // get storage\n    Uploader.prototype.getStorage = function (name) {\n        var cname = 'webugc_' + sha1(name);\n        var result = null;\n        try {\n            result = localStorage.getItem(cname);\n        }\n        catch (e) { }\n        return result;\n    };\n    // delete storage\n    Uploader.prototype.delStorage = function (name) {\n        var cname = 'webugc_' + sha1(name);\n        try {\n            localStorage.removeItem(cname);\n        }\n        catch (e) { }\n    };\n    // get all `webugc` prefix key\n    Uploader.prototype.getStorageNum = function () {\n        var num = 0;\n        try {\n            var reg = /^webugc_[0-9a-fA-F]{40}$/;\n            for (var i = 0; i < localStorage.length; i++) {\n                if (reg.test(localStorage.key(i))) {\n                    num++;\n                }\n            }\n        }\n        catch (e) { }\n        return num;\n    };\n    // validate init params\n    Uploader.prototype.validateInitParams = function (params) {\n        if (!is.fn(params.getSignature)) {\n            throw 'getSignature必须为函数';\n        }\n        if (!isFile(params.videoFile)) {\n            throw 'videoFile必须为视频文件';\n        }\n        if (params.cosSuccess && !is.fn(params.cosSuccess)) {\n            throw 'success必须为函数';\n        }\n        if (params.progress && !is.fn(params.progress)) {\n            throw 'progress必须为函数';\n        }\n        if (params.hashProgress && !is.fn(params.hashProgress)) {\n            throw 'hashProgress必须为函数';\n        }\n    };\n    // validate when init done\n    Uploader.prototype.validateUploadParams = function () {\n        var allowVideoTypes = this.videoTypes;\n        //视频格式过滤\n        if (this.allowAudio) {\n            allowVideoTypes = allowVideoTypes.concat(this.audioTypes);\n        }\n        if (allowVideoTypes.indexOf(this.videoInfo.type.toUpperCase()) == -1) {\n            console.log(\"视频文件格式不正确，请参考 https://cloud.tencent.com/document/product/266/2834#.E9.9F.B3.E8.A7.86.E9.A2.91.E4.B8.8A.E4.BC.A0\");\n        }\n    };\n    Uploader.prototype.genFileInfo = function () {\n        //视频\n        var videoFile = this.videoFile;\n        if (videoFile) {\n            var lastDotIndex = videoFile.name.lastIndexOf('.');\n            var videoName = '';\n            //有指定视频名称，则用该名称\n            if (this.videoName) {\n                if (!is.string(this.videoName)) {\n                    throw 'videoName只能是字符串类型';\n                }\n                else if (/[:*?<>\\\"\\\\/|]/g.test(this.videoName)) {\n                    throw '文件名不得包含 \\\\ / : * ? \" < > | 字符';\n                }\n                else {\n                    videoName = this.videoName;\n                }\n            }\n            else { //不然，则用上传文件的name\n                videoName = videoFile.name.substring(0, lastDotIndex);\n            }\n            this.videoInfo = {\n                name: videoName,\n                type: videoFile.name.substring(lastDotIndex + 1).toLowerCase(),\n                size: videoFile.size\n            };\n            this.storageName = videoFile.name + '_' + videoFile.size;\n        }\n        //封面\n        var coverFile = this.coverFile;\n        if (coverFile) {\n            var coverName = coverFile.name;\n            var coverLastDotIndex = coverName.lastIndexOf('.');\n            this.coverInfo = {\n                name: coverName.substring(0, coverLastDotIndex),\n                type: coverName.substring(coverLastDotIndex + 1).toLowerCase(),\n                size: coverFile.size\n            };\n        }\n    };\n    ;\n    Uploader.prototype.done = function () {\n    };\n    return Uploader;\n}());\nexports.default = Uploader;\n","/* globals window, HTMLElement */\n\n'use strict';\n\n/**!\n * is\n * the definitive JavaScript type testing library\n *\n * @copyright 2013-2014 Enrico Marino / Jordan Harband\n * @license MIT\n */\n\nvar objProto = Object.prototype;\nvar owns = objProto.hasOwnProperty;\nvar toStr = objProto.toString;\nvar symbolValueOf;\nif (typeof Symbol === 'function') {\n  symbolValueOf = Symbol.prototype.valueOf;\n}\nvar bigIntValueOf;\nif (typeof BigInt === 'function') {\n  bigIntValueOf = BigInt.prototype.valueOf;\n}\nvar isActualNaN = function (value) {\n  return value !== value;\n};\nvar NON_HOST_TYPES = {\n  'boolean': 1,\n  number: 1,\n  string: 1,\n  undefined: 1\n};\n\nvar base64Regex = /^([A-Za-z0-9+/]{4})*([A-Za-z0-9+/]{4}|[A-Za-z0-9+/]{3}=|[A-Za-z0-9+/]{2}==)$/;\nvar hexRegex = /^[A-Fa-f0-9]+$/;\n\n/**\n * Expose `is`\n */\n\nvar is = {};\n\n/**\n * Test general.\n */\n\n/**\n * is.type\n * Test if `value` is a type of `type`.\n *\n * @param {*} value value to test\n * @param {String} type type\n * @return {Boolean} true if `value` is a type of `type`, false otherwise\n * @api public\n */\n\nis.a = is.type = function (value, type) {\n  return typeof value === type;\n};\n\n/**\n * is.defined\n * Test if `value` is defined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is defined, false otherwise\n * @api public\n */\n\nis.defined = function (value) {\n  return typeof value !== 'undefined';\n};\n\n/**\n * is.empty\n * Test if `value` is empty.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is empty, false otherwise\n * @api public\n */\n\nis.empty = function (value) {\n  var type = toStr.call(value);\n  var key;\n\n  if (type === '[object Array]' || type === '[object Arguments]' || type === '[object String]') {\n    return value.length === 0;\n  }\n\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (owns.call(value, key)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  return !value;\n};\n\n/**\n * is.equal\n * Test if `value` is equal to `other`.\n *\n * @param {*} value value to test\n * @param {*} other value to compare with\n * @return {Boolean} true if `value` is equal to `other`, false otherwise\n */\n\nis.equal = function equal(value, other) {\n  if (value === other) {\n    return true;\n  }\n\n  var type = toStr.call(value);\n  var key;\n\n  if (type !== toStr.call(other)) {\n    return false;\n  }\n\n  if (type === '[object Object]') {\n    for (key in value) {\n      if (!is.equal(value[key], other[key]) || !(key in other)) {\n        return false;\n      }\n    }\n    for (key in other) {\n      if (!is.equal(value[key], other[key]) || !(key in value)) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (type === '[object Array]') {\n    key = value.length;\n    if (key !== other.length) {\n      return false;\n    }\n    while (key--) {\n      if (!is.equal(value[key], other[key])) {\n        return false;\n      }\n    }\n    return true;\n  }\n\n  if (type === '[object Function]') {\n    return value.prototype === other.prototype;\n  }\n\n  if (type === '[object Date]') {\n    return value.getTime() === other.getTime();\n  }\n\n  return false;\n};\n\n/**\n * is.hosted\n * Test if `value` is hosted by `host`.\n *\n * @param {*} value to test\n * @param {*} host host to test with\n * @return {Boolean} true if `value` is hosted by `host`, false otherwise\n * @api public\n */\n\nis.hosted = function (value, host) {\n  var type = typeof host[value];\n  return type === 'object' ? !!host[value] : !NON_HOST_TYPES[type];\n};\n\n/**\n * is.instance\n * Test if `value` is an instance of `constructor`.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an instance of `constructor`\n * @api public\n */\n\nis.instance = is['instanceof'] = function (value, constructor) {\n  return value instanceof constructor;\n};\n\n/**\n * is.nil / is.null\n * Test if `value` is null.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is null, false otherwise\n * @api public\n */\n\nis.nil = is['null'] = function (value) {\n  return value === null;\n};\n\n/**\n * is.undef / is.undefined\n * Test if `value` is undefined.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is undefined, false otherwise\n * @api public\n */\n\nis.undef = is.undefined = function (value) {\n  return typeof value === 'undefined';\n};\n\n/**\n * Test arguments.\n */\n\n/**\n * is.args\n * Test if `value` is an arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.args = is.arguments = function (value) {\n  var isStandardArguments = toStr.call(value) === '[object Arguments]';\n  var isOldArguments = !is.array(value) && is.arraylike(value) && is.object(value) && is.fn(value.callee);\n  return isStandardArguments || isOldArguments;\n};\n\n/**\n * Test array.\n */\n\n/**\n * is.array\n * Test if 'value' is an array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an array, false otherwise\n * @api public\n */\n\nis.array = Array.isArray || function (value) {\n  return toStr.call(value) === '[object Array]';\n};\n\n/**\n * is.arguments.empty\n * Test if `value` is an empty arguments object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty arguments object, false otherwise\n * @api public\n */\nis.args.empty = function (value) {\n  return is.args(value) && value.length === 0;\n};\n\n/**\n * is.array.empty\n * Test if `value` is an empty array.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an empty array, false otherwise\n * @api public\n */\nis.array.empty = function (value) {\n  return is.array(value) && value.length === 0;\n};\n\n/**\n * is.arraylike\n * Test if `value` is an arraylike object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an arguments object, false otherwise\n * @api public\n */\n\nis.arraylike = function (value) {\n  return !!value && !is.bool(value)\n    && owns.call(value, 'length')\n    && isFinite(value.length)\n    && is.number(value.length)\n    && value.length >= 0;\n};\n\n/**\n * Test boolean.\n */\n\n/**\n * is.bool\n * Test if `value` is a boolean.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a boolean, false otherwise\n * @api public\n */\n\nis.bool = is['boolean'] = function (value) {\n  return toStr.call(value) === '[object Boolean]';\n};\n\n/**\n * is.false\n * Test if `value` is false.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is false, false otherwise\n * @api public\n */\n\nis['false'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === false;\n};\n\n/**\n * is.true\n * Test if `value` is true.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is true, false otherwise\n * @api public\n */\n\nis['true'] = function (value) {\n  return is.bool(value) && Boolean(Number(value)) === true;\n};\n\n/**\n * Test date.\n */\n\n/**\n * is.date\n * Test if `value` is a date.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a date, false otherwise\n * @api public\n */\n\nis.date = function (value) {\n  return toStr.call(value) === '[object Date]';\n};\n\n/**\n * is.date.valid\n * Test if `value` is a valid date.\n *\n * @param {*} value value to test\n * @returns {Boolean} true if `value` is a valid date, false otherwise\n */\nis.date.valid = function (value) {\n  return is.date(value) && !isNaN(Number(value));\n};\n\n/**\n * Test element.\n */\n\n/**\n * is.element\n * Test if `value` is an html element.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an HTML Element, false otherwise\n * @api public\n */\n\nis.element = function (value) {\n  return value !== undefined\n    && typeof HTMLElement !== 'undefined'\n    && value instanceof HTMLElement\n    && value.nodeType === 1;\n};\n\n/**\n * Test error.\n */\n\n/**\n * is.error\n * Test if `value` is an error object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an error object, false otherwise\n * @api public\n */\n\nis.error = function (value) {\n  return toStr.call(value) === '[object Error]';\n};\n\n/**\n * Test function.\n */\n\n/**\n * is.fn / is.function (deprecated)\n * Test if `value` is a function.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a function, false otherwise\n * @api public\n */\n\nis.fn = is['function'] = function (value) {\n  var isAlert = typeof window !== 'undefined' && value === window.alert;\n  if (isAlert) {\n    return true;\n  }\n  var str = toStr.call(value);\n  return str === '[object Function]' || str === '[object GeneratorFunction]' || str === '[object AsyncFunction]';\n};\n\n/**\n * Test number.\n */\n\n/**\n * is.number\n * Test if `value` is a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a number, false otherwise\n * @api public\n */\n\nis.number = function (value) {\n  return toStr.call(value) === '[object Number]';\n};\n\n/**\n * is.infinite\n * Test if `value` is positive or negative infinity.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is positive or negative Infinity, false otherwise\n * @api public\n */\nis.infinite = function (value) {\n  return value === Infinity || value === -Infinity;\n};\n\n/**\n * is.decimal\n * Test if `value` is a decimal number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a decimal number, false otherwise\n * @api public\n */\n\nis.decimal = function (value) {\n  return is.number(value) && !isActualNaN(value) && !is.infinite(value) && value % 1 !== 0;\n};\n\n/**\n * is.divisibleBy\n * Test if `value` is divisible by `n`.\n *\n * @param {Number} value value to test\n * @param {Number} n dividend\n * @return {Boolean} true if `value` is divisible by `n`, false otherwise\n * @api public\n */\n\nis.divisibleBy = function (value, n) {\n  var isDividendInfinite = is.infinite(value);\n  var isDivisorInfinite = is.infinite(n);\n  var isNonZeroNumber = is.number(value) && !isActualNaN(value) && is.number(n) && !isActualNaN(n) && n !== 0;\n  return isDividendInfinite || isDivisorInfinite || (isNonZeroNumber && value % n === 0);\n};\n\n/**\n * is.integer\n * Test if `value` is an integer.\n *\n * @param value to test\n * @return {Boolean} true if `value` is an integer, false otherwise\n * @api public\n */\n\nis.integer = is['int'] = function (value) {\n  return is.number(value) && !isActualNaN(value) && value % 1 === 0;\n};\n\n/**\n * is.maximum\n * Test if `value` is greater than 'others' values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is greater than `others` values\n * @api public\n */\n\nis.maximum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value < others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.minimum\n * Test if `value` is less than `others` values.\n *\n * @param {Number} value value to test\n * @param {Array} others values to compare with\n * @return {Boolean} true if `value` is less than `others` values\n * @api public\n */\n\nis.minimum = function (value, others) {\n  if (isActualNaN(value)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.arraylike(others)) {\n    throw new TypeError('second argument must be array-like');\n  }\n  var len = others.length;\n\n  while (--len >= 0) {\n    if (value > others[len]) {\n      return false;\n    }\n  }\n\n  return true;\n};\n\n/**\n * is.nan\n * Test if `value` is not a number.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is not a number, false otherwise\n * @api public\n */\n\nis.nan = function (value) {\n  return !is.number(value) || value !== value;\n};\n\n/**\n * is.even\n * Test if `value` is an even number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an even number, false otherwise\n * @api public\n */\n\nis.even = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 === 0);\n};\n\n/**\n * is.odd\n * Test if `value` is an odd number.\n *\n * @param {Number} value value to test\n * @return {Boolean} true if `value` is an odd number, false otherwise\n * @api public\n */\n\nis.odd = function (value) {\n  return is.infinite(value) || (is.number(value) && value === value && value % 2 !== 0);\n};\n\n/**\n * is.ge\n * Test if `value` is greater than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.ge = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value >= other;\n};\n\n/**\n * is.gt\n * Test if `value` is greater than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean}\n * @api public\n */\n\nis.gt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value > other;\n};\n\n/**\n * is.le\n * Test if `value` is less than or equal to `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if 'value' is less than or equal to 'other'\n * @api public\n */\n\nis.le = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value <= other;\n};\n\n/**\n * is.lt\n * Test if `value` is less than `other`.\n *\n * @param {Number} value value to test\n * @param {Number} other value to compare with\n * @return {Boolean} if `value` is less than `other`\n * @api public\n */\n\nis.lt = function (value, other) {\n  if (isActualNaN(value) || isActualNaN(other)) {\n    throw new TypeError('NaN is not a valid value');\n  }\n  return !is.infinite(value) && !is.infinite(other) && value < other;\n};\n\n/**\n * is.within\n * Test if `value` is within `start` and `finish`.\n *\n * @param {Number} value value to test\n * @param {Number} start lower bound\n * @param {Number} finish upper bound\n * @return {Boolean} true if 'value' is is within 'start' and 'finish'\n * @api public\n */\nis.within = function (value, start, finish) {\n  if (isActualNaN(value) || isActualNaN(start) || isActualNaN(finish)) {\n    throw new TypeError('NaN is not a valid value');\n  } else if (!is.number(value) || !is.number(start) || !is.number(finish)) {\n    throw new TypeError('all arguments must be numbers');\n  }\n  var isAnyInfinite = is.infinite(value) || is.infinite(start) || is.infinite(finish);\n  return isAnyInfinite || (value >= start && value <= finish);\n};\n\n/**\n * Test object.\n */\n\n/**\n * is.object\n * Test if `value` is an object.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is an object, false otherwise\n * @api public\n */\nis.object = function (value) {\n  return toStr.call(value) === '[object Object]';\n};\n\n/**\n * is.primitive\n * Test if `value` is a primitive.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a primitive, false otherwise\n * @api public\n */\nis.primitive = function isPrimitive(value) {\n  if (!value) {\n    return true;\n  }\n  if (typeof value === 'object' || is.object(value) || is.fn(value) || is.array(value)) {\n    return false;\n  }\n  return true;\n};\n\n/**\n * is.hash\n * Test if `value` is a hash - a plain object literal.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a hash, false otherwise\n * @api public\n */\n\nis.hash = function (value) {\n  return is.object(value) && value.constructor === Object && !value.nodeType && !value.setInterval;\n};\n\n/**\n * Test regexp.\n */\n\n/**\n * is.regexp\n * Test if `value` is a regular expression.\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a regexp, false otherwise\n * @api public\n */\n\nis.regexp = function (value) {\n  return toStr.call(value) === '[object RegExp]';\n};\n\n/**\n * Test string.\n */\n\n/**\n * is.string\n * Test if `value` is a string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a string, false otherwise\n * @api public\n */\n\nis.string = function (value) {\n  return toStr.call(value) === '[object String]';\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.base64\n * Test if `value` is a valid base64 encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a base64 encoded string, false otherwise\n * @api public\n */\n\nis.base64 = function (value) {\n  return is.string(value) && (!value.length || base64Regex.test(value));\n};\n\n/**\n * Test base64 string.\n */\n\n/**\n * is.hex\n * Test if `value` is a valid hex encoded string.\n *\n * @param {*} value value to test\n * @return {Boolean} true if 'value' is a hex encoded string, false otherwise\n * @api public\n */\n\nis.hex = function (value) {\n  return is.string(value) && (!value.length || hexRegex.test(value));\n};\n\n/**\n * is.symbol\n * Test if `value` is an ES6 Symbol\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a Symbol, false otherise\n * @api public\n */\n\nis.symbol = function (value) {\n  return typeof Symbol === 'function' && toStr.call(value) === '[object Symbol]' && typeof symbolValueOf.call(value) === 'symbol';\n};\n\n/**\n * is.bigint\n * Test if `value` is an ES-proposed BigInt\n *\n * @param {*} value value to test\n * @return {Boolean} true if `value` is a BigInt, false otherise\n * @api public\n */\n\nis.bigint = function (value) {\n  // eslint-disable-next-line valid-typeof\n  return typeof BigInt === 'function' && toStr.call(value) === '[object BigInt]' && typeof bigIntValueOf.call(value) === 'bigint';\n};\n\nmodule.exports = is;\n","(function() {\n  var crypt = require('crypt'),\n      utf8 = require('charenc').utf8,\n      bin = require('charenc').bin,\n\n  // The core\n  sha1 = function (message) {\n    // Convert to byte array\n    if (message.constructor == String)\n      message = utf8.stringToBytes(message);\n    else if (typeof Buffer !== 'undefined' && typeof Buffer.isBuffer == 'function' && Buffer.isBuffer(message))\n      message = Array.prototype.slice.call(message, 0);\n    else if (!Array.isArray(message))\n      message = message.toString();\n\n    // otherwise assume byte array\n\n    var m  = crypt.bytesToWords(message),\n        l  = message.length * 8,\n        w  = [],\n        H0 =  1732584193,\n        H1 = -271733879,\n        H2 = -1732584194,\n        H3 =  271733878,\n        H4 = -1009589776;\n\n    // Padding\n    m[l >> 5] |= 0x80 << (24 - l % 32);\n    m[((l + 64 >>> 9) << 4) + 15] = l;\n\n    for (var i = 0; i < m.length; i += 16) {\n      var a = H0,\n          b = H1,\n          c = H2,\n          d = H3,\n          e = H4;\n\n      for (var j = 0; j < 80; j++) {\n\n        if (j < 16)\n          w[j] = m[i + j];\n        else {\n          var n = w[j - 3] ^ w[j - 8] ^ w[j - 14] ^ w[j - 16];\n          w[j] = (n << 1) | (n >>> 31);\n        }\n\n        var t = ((H0 << 5) | (H0 >>> 27)) + H4 + (w[j] >>> 0) + (\n                j < 20 ? (H1 & H2 | ~H1 & H3) + 1518500249 :\n                j < 40 ? (H1 ^ H2 ^ H3) + 1859775393 :\n                j < 60 ? (H1 & H2 | H1 & H3 | H2 & H3) - 1894007588 :\n                         (H1 ^ H2 ^ H3) - 899497514);\n\n        H4 = H3;\n        H3 = H2;\n        H2 = (H1 << 30) | (H1 >>> 2);\n        H1 = H0;\n        H0 = t;\n      }\n\n      H0 += a;\n      H1 += b;\n      H2 += c;\n      H3 += d;\n      H4 += e;\n    }\n\n    return [H0, H1, H2, H3, H4];\n  },\n\n  // Public API\n  api = function (message, options) {\n    var digestbytes = crypt.wordsToBytes(sha1(message));\n    return options && options.asBytes ? digestbytes :\n        options && options.asString ? bin.bytesToString(digestbytes) :\n        crypt.bytesToHex(digestbytes);\n  };\n\n  api._blocksize = 16;\n  api._digestsize = 20;\n\n  module.exports = api;\n})();\n","/*!\n * The buffer module from node.js, for the browser.\n *\n * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>\n * @license  MIT\n */\n/* eslint-disable no-proto */\n\n'use strict'\n\nvar base64 = require('base64-js')\nvar ieee754 = require('ieee754')\nvar isArray = require('isarray')\n\nexports.Buffer = Buffer\nexports.SlowBuffer = SlowBuffer\nexports.INSPECT_MAX_BYTES = 50\n\n/**\n * If `Buffer.TYPED_ARRAY_SUPPORT`:\n *   === true    Use Uint8Array implementation (fastest)\n *   === false   Use Object implementation (most compatible, even IE6)\n *\n * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,\n * Opera 11.6+, iOS 4.2+.\n *\n * Due to various browser bugs, sometimes the Object implementation will be used even\n * when the browser supports typed arrays.\n *\n * Note:\n *\n *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,\n *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.\n *\n *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.\n *\n *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of\n *     incorrect length in some situations.\n\n * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they\n * get the Object implementation, which is slower but behaves correctly.\n */\nBuffer.TYPED_ARRAY_SUPPORT = global.TYPED_ARRAY_SUPPORT !== undefined\n  ? global.TYPED_ARRAY_SUPPORT\n  : typedArraySupport()\n\n/*\n * Export kMaxLength after typed array support is determined.\n */\nexports.kMaxLength = kMaxLength()\n\nfunction typedArraySupport () {\n  try {\n    var arr = new Uint8Array(1)\n    arr.__proto__ = {__proto__: Uint8Array.prototype, foo: function () { return 42 }}\n    return arr.foo() === 42 && // typed array instances can be augmented\n        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`\n        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`\n  } catch (e) {\n    return false\n  }\n}\n\nfunction kMaxLength () {\n  return Buffer.TYPED_ARRAY_SUPPORT\n    ? 0x7fffffff\n    : 0x3fffffff\n}\n\nfunction createBuffer (that, length) {\n  if (kMaxLength() < length) {\n    throw new RangeError('Invalid typed array length')\n  }\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = new Uint8Array(length)\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    if (that === null) {\n      that = new Buffer(length)\n    }\n    that.length = length\n  }\n\n  return that\n}\n\n/**\n * The Buffer constructor returns instances of `Uint8Array` that have their\n * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of\n * `Uint8Array`, so the returned instances will have all the node `Buffer` methods\n * and the `Uint8Array` methods. Square bracket notation works as expected -- it\n * returns a single octet.\n *\n * The `Uint8Array` prototype remains unmodified.\n */\n\nfunction Buffer (arg, encodingOrOffset, length) {\n  if (!Buffer.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer)) {\n    return new Buffer(arg, encodingOrOffset, length)\n  }\n\n  // Common case.\n  if (typeof arg === 'number') {\n    if (typeof encodingOrOffset === 'string') {\n      throw new Error(\n        'If encoding is specified then the first argument must be a string'\n      )\n    }\n    return allocUnsafe(this, arg)\n  }\n  return from(this, arg, encodingOrOffset, length)\n}\n\nBuffer.poolSize = 8192 // not used by this implementation\n\n// TODO: Legacy, not needed anymore. Remove in next major version.\nBuffer._augment = function (arr) {\n  arr.__proto__ = Buffer.prototype\n  return arr\n}\n\nfunction from (that, value, encodingOrOffset, length) {\n  if (typeof value === 'number') {\n    throw new TypeError('\"value\" argument must not be a number')\n  }\n\n  if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {\n    return fromArrayBuffer(that, value, encodingOrOffset, length)\n  }\n\n  if (typeof value === 'string') {\n    return fromString(that, value, encodingOrOffset)\n  }\n\n  return fromObject(that, value)\n}\n\n/**\n * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError\n * if value is a number.\n * Buffer.from(str[, encoding])\n * Buffer.from(array)\n * Buffer.from(buffer)\n * Buffer.from(arrayBuffer[, byteOffset[, length]])\n **/\nBuffer.from = function (value, encodingOrOffset, length) {\n  return from(null, value, encodingOrOffset, length)\n}\n\nif (Buffer.TYPED_ARRAY_SUPPORT) {\n  Buffer.prototype.__proto__ = Uint8Array.prototype\n  Buffer.__proto__ = Uint8Array\n  if (typeof Symbol !== 'undefined' && Symbol.species &&\n      Buffer[Symbol.species] === Buffer) {\n    // Fix subarray() in ES2016. See: https://github.com/feross/buffer/pull/97\n    Object.defineProperty(Buffer, Symbol.species, {\n      value: null,\n      configurable: true\n    })\n  }\n}\n\nfunction assertSize (size) {\n  if (typeof size !== 'number') {\n    throw new TypeError('\"size\" argument must be a number')\n  } else if (size < 0) {\n    throw new RangeError('\"size\" argument must not be negative')\n  }\n}\n\nfunction alloc (that, size, fill, encoding) {\n  assertSize(size)\n  if (size <= 0) {\n    return createBuffer(that, size)\n  }\n  if (fill !== undefined) {\n    // Only pay attention to encoding if it's a string. This\n    // prevents accidentally sending in a number that would\n    // be interpretted as a start offset.\n    return typeof encoding === 'string'\n      ? createBuffer(that, size).fill(fill, encoding)\n      : createBuffer(that, size).fill(fill)\n  }\n  return createBuffer(that, size)\n}\n\n/**\n * Creates a new filled Buffer instance.\n * alloc(size[, fill[, encoding]])\n **/\nBuffer.alloc = function (size, fill, encoding) {\n  return alloc(null, size, fill, encoding)\n}\n\nfunction allocUnsafe (that, size) {\n  assertSize(size)\n  that = createBuffer(that, size < 0 ? 0 : checked(size) | 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) {\n    for (var i = 0; i < size; ++i) {\n      that[i] = 0\n    }\n  }\n  return that\n}\n\n/**\n * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.\n * */\nBuffer.allocUnsafe = function (size) {\n  return allocUnsafe(null, size)\n}\n/**\n * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.\n */\nBuffer.allocUnsafeSlow = function (size) {\n  return allocUnsafe(null, size)\n}\n\nfunction fromString (that, string, encoding) {\n  if (typeof encoding !== 'string' || encoding === '') {\n    encoding = 'utf8'\n  }\n\n  if (!Buffer.isEncoding(encoding)) {\n    throw new TypeError('\"encoding\" must be a valid string encoding')\n  }\n\n  var length = byteLength(string, encoding) | 0\n  that = createBuffer(that, length)\n\n  var actual = that.write(string, encoding)\n\n  if (actual !== length) {\n    // Writing a hex string, for example, that contains invalid characters will\n    // cause everything after the first invalid character to be ignored. (e.g.\n    // 'abxxcd' will be treated as 'ab')\n    that = that.slice(0, actual)\n  }\n\n  return that\n}\n\nfunction fromArrayLike (that, array) {\n  var length = array.length < 0 ? 0 : checked(array.length) | 0\n  that = createBuffer(that, length)\n  for (var i = 0; i < length; i += 1) {\n    that[i] = array[i] & 255\n  }\n  return that\n}\n\nfunction fromArrayBuffer (that, array, byteOffset, length) {\n  array.byteLength // this throws if `array` is not a valid ArrayBuffer\n\n  if (byteOffset < 0 || array.byteLength < byteOffset) {\n    throw new RangeError('\\'offset\\' is out of bounds')\n  }\n\n  if (array.byteLength < byteOffset + (length || 0)) {\n    throw new RangeError('\\'length\\' is out of bounds')\n  }\n\n  if (byteOffset === undefined && length === undefined) {\n    array = new Uint8Array(array)\n  } else if (length === undefined) {\n    array = new Uint8Array(array, byteOffset)\n  } else {\n    array = new Uint8Array(array, byteOffset, length)\n  }\n\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    // Return an augmented `Uint8Array` instance, for best performance\n    that = array\n    that.__proto__ = Buffer.prototype\n  } else {\n    // Fallback: Return an object instance of the Buffer class\n    that = fromArrayLike(that, array)\n  }\n  return that\n}\n\nfunction fromObject (that, obj) {\n  if (Buffer.isBuffer(obj)) {\n    var len = checked(obj.length) | 0\n    that = createBuffer(that, len)\n\n    if (that.length === 0) {\n      return that\n    }\n\n    obj.copy(that, 0, 0, len)\n    return that\n  }\n\n  if (obj) {\n    if ((typeof ArrayBuffer !== 'undefined' &&\n        obj.buffer instanceof ArrayBuffer) || 'length' in obj) {\n      if (typeof obj.length !== 'number' || isnan(obj.length)) {\n        return createBuffer(that, 0)\n      }\n      return fromArrayLike(that, obj)\n    }\n\n    if (obj.type === 'Buffer' && isArray(obj.data)) {\n      return fromArrayLike(that, obj.data)\n    }\n  }\n\n  throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')\n}\n\nfunction checked (length) {\n  // Note: cannot use `length < kMaxLength()` here because that fails when\n  // length is NaN (which is otherwise coerced to zero.)\n  if (length >= kMaxLength()) {\n    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +\n                         'size: 0x' + kMaxLength().toString(16) + ' bytes')\n  }\n  return length | 0\n}\n\nfunction SlowBuffer (length) {\n  if (+length != length) { // eslint-disable-line eqeqeq\n    length = 0\n  }\n  return Buffer.alloc(+length)\n}\n\nBuffer.isBuffer = function isBuffer (b) {\n  return !!(b != null && b._isBuffer)\n}\n\nBuffer.compare = function compare (a, b) {\n  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {\n    throw new TypeError('Arguments must be Buffers')\n  }\n\n  if (a === b) return 0\n\n  var x = a.length\n  var y = b.length\n\n  for (var i = 0, len = Math.min(x, y); i < len; ++i) {\n    if (a[i] !== b[i]) {\n      x = a[i]\n      y = b[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\nBuffer.isEncoding = function isEncoding (encoding) {\n  switch (String(encoding).toLowerCase()) {\n    case 'hex':\n    case 'utf8':\n    case 'utf-8':\n    case 'ascii':\n    case 'latin1':\n    case 'binary':\n    case 'base64':\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return true\n    default:\n      return false\n  }\n}\n\nBuffer.concat = function concat (list, length) {\n  if (!isArray(list)) {\n    throw new TypeError('\"list\" argument must be an Array of Buffers')\n  }\n\n  if (list.length === 0) {\n    return Buffer.alloc(0)\n  }\n\n  var i\n  if (length === undefined) {\n    length = 0\n    for (i = 0; i < list.length; ++i) {\n      length += list[i].length\n    }\n  }\n\n  var buffer = Buffer.allocUnsafe(length)\n  var pos = 0\n  for (i = 0; i < list.length; ++i) {\n    var buf = list[i]\n    if (!Buffer.isBuffer(buf)) {\n      throw new TypeError('\"list\" argument must be an Array of Buffers')\n    }\n    buf.copy(buffer, pos)\n    pos += buf.length\n  }\n  return buffer\n}\n\nfunction byteLength (string, encoding) {\n  if (Buffer.isBuffer(string)) {\n    return string.length\n  }\n  if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&\n      (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {\n    return string.byteLength\n  }\n  if (typeof string !== 'string') {\n    string = '' + string\n  }\n\n  var len = string.length\n  if (len === 0) return 0\n\n  // Use a for loop to avoid recursion\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'ascii':\n      case 'latin1':\n      case 'binary':\n        return len\n      case 'utf8':\n      case 'utf-8':\n      case undefined:\n        return utf8ToBytes(string).length\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return len * 2\n      case 'hex':\n        return len >>> 1\n      case 'base64':\n        return base64ToBytes(string).length\n      default:\n        if (loweredCase) return utf8ToBytes(string).length // assume utf8\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\nBuffer.byteLength = byteLength\n\nfunction slowToString (encoding, start, end) {\n  var loweredCase = false\n\n  // No need to verify that \"this.length <= MAX_UINT32\" since it's a read-only\n  // property of a typed array.\n\n  // This behaves neither like String nor Uint8Array in that we set start/end\n  // to their upper/lower bounds if the value passed is out of range.\n  // undefined is handled specially as per ECMA-262 6th Edition,\n  // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.\n  if (start === undefined || start < 0) {\n    start = 0\n  }\n  // Return early if start > this.length. Done here to prevent potential uint32\n  // coercion fail below.\n  if (start > this.length) {\n    return ''\n  }\n\n  if (end === undefined || end > this.length) {\n    end = this.length\n  }\n\n  if (end <= 0) {\n    return ''\n  }\n\n  // Force coersion to uint32. This will also coerce falsey/NaN values to 0.\n  end >>>= 0\n  start >>>= 0\n\n  if (end <= start) {\n    return ''\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  while (true) {\n    switch (encoding) {\n      case 'hex':\n        return hexSlice(this, start, end)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Slice(this, start, end)\n\n      case 'ascii':\n        return asciiSlice(this, start, end)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Slice(this, start, end)\n\n      case 'base64':\n        return base64Slice(this, start, end)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return utf16leSlice(this, start, end)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = (encoding + '').toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\n// The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect\n// Buffer instances.\nBuffer.prototype._isBuffer = true\n\nfunction swap (b, n, m) {\n  var i = b[n]\n  b[n] = b[m]\n  b[m] = i\n}\n\nBuffer.prototype.swap16 = function swap16 () {\n  var len = this.length\n  if (len % 2 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 16-bits')\n  }\n  for (var i = 0; i < len; i += 2) {\n    swap(this, i, i + 1)\n  }\n  return this\n}\n\nBuffer.prototype.swap32 = function swap32 () {\n  var len = this.length\n  if (len % 4 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 32-bits')\n  }\n  for (var i = 0; i < len; i += 4) {\n    swap(this, i, i + 3)\n    swap(this, i + 1, i + 2)\n  }\n  return this\n}\n\nBuffer.prototype.swap64 = function swap64 () {\n  var len = this.length\n  if (len % 8 !== 0) {\n    throw new RangeError('Buffer size must be a multiple of 64-bits')\n  }\n  for (var i = 0; i < len; i += 8) {\n    swap(this, i, i + 7)\n    swap(this, i + 1, i + 6)\n    swap(this, i + 2, i + 5)\n    swap(this, i + 3, i + 4)\n  }\n  return this\n}\n\nBuffer.prototype.toString = function toString () {\n  var length = this.length | 0\n  if (length === 0) return ''\n  if (arguments.length === 0) return utf8Slice(this, 0, length)\n  return slowToString.apply(this, arguments)\n}\n\nBuffer.prototype.equals = function equals (b) {\n  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')\n  if (this === b) return true\n  return Buffer.compare(this, b) === 0\n}\n\nBuffer.prototype.inspect = function inspect () {\n  var str = ''\n  var max = exports.INSPECT_MAX_BYTES\n  if (this.length > 0) {\n    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')\n    if (this.length > max) str += ' ... '\n  }\n  return '<Buffer ' + str + '>'\n}\n\nBuffer.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {\n  if (!Buffer.isBuffer(target)) {\n    throw new TypeError('Argument must be a Buffer')\n  }\n\n  if (start === undefined) {\n    start = 0\n  }\n  if (end === undefined) {\n    end = target ? target.length : 0\n  }\n  if (thisStart === undefined) {\n    thisStart = 0\n  }\n  if (thisEnd === undefined) {\n    thisEnd = this.length\n  }\n\n  if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {\n    throw new RangeError('out of range index')\n  }\n\n  if (thisStart >= thisEnd && start >= end) {\n    return 0\n  }\n  if (thisStart >= thisEnd) {\n    return -1\n  }\n  if (start >= end) {\n    return 1\n  }\n\n  start >>>= 0\n  end >>>= 0\n  thisStart >>>= 0\n  thisEnd >>>= 0\n\n  if (this === target) return 0\n\n  var x = thisEnd - thisStart\n  var y = end - start\n  var len = Math.min(x, y)\n\n  var thisCopy = this.slice(thisStart, thisEnd)\n  var targetCopy = target.slice(start, end)\n\n  for (var i = 0; i < len; ++i) {\n    if (thisCopy[i] !== targetCopy[i]) {\n      x = thisCopy[i]\n      y = targetCopy[i]\n      break\n    }\n  }\n\n  if (x < y) return -1\n  if (y < x) return 1\n  return 0\n}\n\n// Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,\n// OR the last index of `val` in `buffer` at offset <= `byteOffset`.\n//\n// Arguments:\n// - buffer - a Buffer to search\n// - val - a string, Buffer, or number\n// - byteOffset - an index into `buffer`; will be clamped to an int32\n// - encoding - an optional encoding, relevant is val is a string\n// - dir - true for indexOf, false for lastIndexOf\nfunction bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {\n  // Empty buffer means no match\n  if (buffer.length === 0) return -1\n\n  // Normalize byteOffset\n  if (typeof byteOffset === 'string') {\n    encoding = byteOffset\n    byteOffset = 0\n  } else if (byteOffset > 0x7fffffff) {\n    byteOffset = 0x7fffffff\n  } else if (byteOffset < -0x80000000) {\n    byteOffset = -0x80000000\n  }\n  byteOffset = +byteOffset  // Coerce to Number.\n  if (isNaN(byteOffset)) {\n    // byteOffset: it it's undefined, null, NaN, \"foo\", etc, search whole buffer\n    byteOffset = dir ? 0 : (buffer.length - 1)\n  }\n\n  // Normalize byteOffset: negative offsets start from the end of the buffer\n  if (byteOffset < 0) byteOffset = buffer.length + byteOffset\n  if (byteOffset >= buffer.length) {\n    if (dir) return -1\n    else byteOffset = buffer.length - 1\n  } else if (byteOffset < 0) {\n    if (dir) byteOffset = 0\n    else return -1\n  }\n\n  // Normalize val\n  if (typeof val === 'string') {\n    val = Buffer.from(val, encoding)\n  }\n\n  // Finally, search either indexOf (if dir is true) or lastIndexOf\n  if (Buffer.isBuffer(val)) {\n    // Special case: looking for empty string/buffer always fails\n    if (val.length === 0) {\n      return -1\n    }\n    return arrayIndexOf(buffer, val, byteOffset, encoding, dir)\n  } else if (typeof val === 'number') {\n    val = val & 0xFF // Search for a byte value [0-255]\n    if (Buffer.TYPED_ARRAY_SUPPORT &&\n        typeof Uint8Array.prototype.indexOf === 'function') {\n      if (dir) {\n        return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)\n      } else {\n        return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)\n      }\n    }\n    return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)\n  }\n\n  throw new TypeError('val must be string, number or Buffer')\n}\n\nfunction arrayIndexOf (arr, val, byteOffset, encoding, dir) {\n  var indexSize = 1\n  var arrLength = arr.length\n  var valLength = val.length\n\n  if (encoding !== undefined) {\n    encoding = String(encoding).toLowerCase()\n    if (encoding === 'ucs2' || encoding === 'ucs-2' ||\n        encoding === 'utf16le' || encoding === 'utf-16le') {\n      if (arr.length < 2 || val.length < 2) {\n        return -1\n      }\n      indexSize = 2\n      arrLength /= 2\n      valLength /= 2\n      byteOffset /= 2\n    }\n  }\n\n  function read (buf, i) {\n    if (indexSize === 1) {\n      return buf[i]\n    } else {\n      return buf.readUInt16BE(i * indexSize)\n    }\n  }\n\n  var i\n  if (dir) {\n    var foundIndex = -1\n    for (i = byteOffset; i < arrLength; i++) {\n      if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {\n        if (foundIndex === -1) foundIndex = i\n        if (i - foundIndex + 1 === valLength) return foundIndex * indexSize\n      } else {\n        if (foundIndex !== -1) i -= i - foundIndex\n        foundIndex = -1\n      }\n    }\n  } else {\n    if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength\n    for (i = byteOffset; i >= 0; i--) {\n      var found = true\n      for (var j = 0; j < valLength; j++) {\n        if (read(arr, i + j) !== read(val, j)) {\n          found = false\n          break\n        }\n      }\n      if (found) return i\n    }\n  }\n\n  return -1\n}\n\nBuffer.prototype.includes = function includes (val, byteOffset, encoding) {\n  return this.indexOf(val, byteOffset, encoding) !== -1\n}\n\nBuffer.prototype.indexOf = function indexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, true)\n}\n\nBuffer.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {\n  return bidirectionalIndexOf(this, val, byteOffset, encoding, false)\n}\n\nfunction hexWrite (buf, string, offset, length) {\n  offset = Number(offset) || 0\n  var remaining = buf.length - offset\n  if (!length) {\n    length = remaining\n  } else {\n    length = Number(length)\n    if (length > remaining) {\n      length = remaining\n    }\n  }\n\n  // must be an even number of digits\n  var strLen = string.length\n  if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')\n\n  if (length > strLen / 2) {\n    length = strLen / 2\n  }\n  for (var i = 0; i < length; ++i) {\n    var parsed = parseInt(string.substr(i * 2, 2), 16)\n    if (isNaN(parsed)) return i\n    buf[offset + i] = parsed\n  }\n  return i\n}\n\nfunction utf8Write (buf, string, offset, length) {\n  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nfunction asciiWrite (buf, string, offset, length) {\n  return blitBuffer(asciiToBytes(string), buf, offset, length)\n}\n\nfunction latin1Write (buf, string, offset, length) {\n  return asciiWrite(buf, string, offset, length)\n}\n\nfunction base64Write (buf, string, offset, length) {\n  return blitBuffer(base64ToBytes(string), buf, offset, length)\n}\n\nfunction ucs2Write (buf, string, offset, length) {\n  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)\n}\n\nBuffer.prototype.write = function write (string, offset, length, encoding) {\n  // Buffer#write(string)\n  if (offset === undefined) {\n    encoding = 'utf8'\n    length = this.length\n    offset = 0\n  // Buffer#write(string, encoding)\n  } else if (length === undefined && typeof offset === 'string') {\n    encoding = offset\n    length = this.length\n    offset = 0\n  // Buffer#write(string, offset[, length][, encoding])\n  } else if (isFinite(offset)) {\n    offset = offset | 0\n    if (isFinite(length)) {\n      length = length | 0\n      if (encoding === undefined) encoding = 'utf8'\n    } else {\n      encoding = length\n      length = undefined\n    }\n  // legacy write(string, encoding, offset, length) - remove in v0.13\n  } else {\n    throw new Error(\n      'Buffer.write(string, encoding, offset[, length]) is no longer supported'\n    )\n  }\n\n  var remaining = this.length - offset\n  if (length === undefined || length > remaining) length = remaining\n\n  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {\n    throw new RangeError('Attempt to write outside buffer bounds')\n  }\n\n  if (!encoding) encoding = 'utf8'\n\n  var loweredCase = false\n  for (;;) {\n    switch (encoding) {\n      case 'hex':\n        return hexWrite(this, string, offset, length)\n\n      case 'utf8':\n      case 'utf-8':\n        return utf8Write(this, string, offset, length)\n\n      case 'ascii':\n        return asciiWrite(this, string, offset, length)\n\n      case 'latin1':\n      case 'binary':\n        return latin1Write(this, string, offset, length)\n\n      case 'base64':\n        // Warning: maxLength not taken into account in base64Write\n        return base64Write(this, string, offset, length)\n\n      case 'ucs2':\n      case 'ucs-2':\n      case 'utf16le':\n      case 'utf-16le':\n        return ucs2Write(this, string, offset, length)\n\n      default:\n        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)\n        encoding = ('' + encoding).toLowerCase()\n        loweredCase = true\n    }\n  }\n}\n\nBuffer.prototype.toJSON = function toJSON () {\n  return {\n    type: 'Buffer',\n    data: Array.prototype.slice.call(this._arr || this, 0)\n  }\n}\n\nfunction base64Slice (buf, start, end) {\n  if (start === 0 && end === buf.length) {\n    return base64.fromByteArray(buf)\n  } else {\n    return base64.fromByteArray(buf.slice(start, end))\n  }\n}\n\nfunction utf8Slice (buf, start, end) {\n  end = Math.min(buf.length, end)\n  var res = []\n\n  var i = start\n  while (i < end) {\n    var firstByte = buf[i]\n    var codePoint = null\n    var bytesPerSequence = (firstByte > 0xEF) ? 4\n      : (firstByte > 0xDF) ? 3\n      : (firstByte > 0xBF) ? 2\n      : 1\n\n    if (i + bytesPerSequence <= end) {\n      var secondByte, thirdByte, fourthByte, tempCodePoint\n\n      switch (bytesPerSequence) {\n        case 1:\n          if (firstByte < 0x80) {\n            codePoint = firstByte\n          }\n          break\n        case 2:\n          secondByte = buf[i + 1]\n          if ((secondByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)\n            if (tempCodePoint > 0x7F) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 3:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)\n            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {\n              codePoint = tempCodePoint\n            }\n          }\n          break\n        case 4:\n          secondByte = buf[i + 1]\n          thirdByte = buf[i + 2]\n          fourthByte = buf[i + 3]\n          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {\n            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)\n            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {\n              codePoint = tempCodePoint\n            }\n          }\n      }\n    }\n\n    if (codePoint === null) {\n      // we did not generate a valid codePoint so insert a\n      // replacement char (U+FFFD) and advance only 1 byte\n      codePoint = 0xFFFD\n      bytesPerSequence = 1\n    } else if (codePoint > 0xFFFF) {\n      // encode to utf16 (surrogate pair dance)\n      codePoint -= 0x10000\n      res.push(codePoint >>> 10 & 0x3FF | 0xD800)\n      codePoint = 0xDC00 | codePoint & 0x3FF\n    }\n\n    res.push(codePoint)\n    i += bytesPerSequence\n  }\n\n  return decodeCodePointsArray(res)\n}\n\n// Based on http://stackoverflow.com/a/22747272/680742, the browser with\n// the lowest limit is Chrome, with 0x10000 args.\n// We go 1 magnitude less, for safety\nvar MAX_ARGUMENTS_LENGTH = 0x1000\n\nfunction decodeCodePointsArray (codePoints) {\n  var len = codePoints.length\n  if (len <= MAX_ARGUMENTS_LENGTH) {\n    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()\n  }\n\n  // Decode in chunks to avoid \"call stack size exceeded\".\n  var res = ''\n  var i = 0\n  while (i < len) {\n    res += String.fromCharCode.apply(\n      String,\n      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)\n    )\n  }\n  return res\n}\n\nfunction asciiSlice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i] & 0x7F)\n  }\n  return ret\n}\n\nfunction latin1Slice (buf, start, end) {\n  var ret = ''\n  end = Math.min(buf.length, end)\n\n  for (var i = start; i < end; ++i) {\n    ret += String.fromCharCode(buf[i])\n  }\n  return ret\n}\n\nfunction hexSlice (buf, start, end) {\n  var len = buf.length\n\n  if (!start || start < 0) start = 0\n  if (!end || end < 0 || end > len) end = len\n\n  var out = ''\n  for (var i = start; i < end; ++i) {\n    out += toHex(buf[i])\n  }\n  return out\n}\n\nfunction utf16leSlice (buf, start, end) {\n  var bytes = buf.slice(start, end)\n  var res = ''\n  for (var i = 0; i < bytes.length; i += 2) {\n    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)\n  }\n  return res\n}\n\nBuffer.prototype.slice = function slice (start, end) {\n  var len = this.length\n  start = ~~start\n  end = end === undefined ? len : ~~end\n\n  if (start < 0) {\n    start += len\n    if (start < 0) start = 0\n  } else if (start > len) {\n    start = len\n  }\n\n  if (end < 0) {\n    end += len\n    if (end < 0) end = 0\n  } else if (end > len) {\n    end = len\n  }\n\n  if (end < start) end = start\n\n  var newBuf\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    newBuf = this.subarray(start, end)\n    newBuf.__proto__ = Buffer.prototype\n  } else {\n    var sliceLen = end - start\n    newBuf = new Buffer(sliceLen, undefined)\n    for (var i = 0; i < sliceLen; ++i) {\n      newBuf[i] = this[i + start]\n    }\n  }\n\n  return newBuf\n}\n\n/*\n * Need to make sure that buffer isn't trying to write out of bounds.\n */\nfunction checkOffset (offset, ext, length) {\n  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')\n  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')\n}\n\nBuffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    checkOffset(offset, byteLength, this.length)\n  }\n\n  var val = this[offset + --byteLength]\n  var mul = 1\n  while (byteLength > 0 && (mul *= 0x100)) {\n    val += this[offset + --byteLength] * mul\n  }\n\n  return val\n}\n\nBuffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  return this[offset]\n}\n\nBuffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return this[offset] | (this[offset + 1] << 8)\n}\n\nBuffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  return (this[offset] << 8) | this[offset + 1]\n}\n\nBuffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return ((this[offset]) |\n      (this[offset + 1] << 8) |\n      (this[offset + 2] << 16)) +\n      (this[offset + 3] * 0x1000000)\n}\n\nBuffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] * 0x1000000) +\n    ((this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    this[offset + 3])\n}\n\nBuffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var val = this[offset]\n  var mul = 1\n  var i = 0\n  while (++i < byteLength && (mul *= 0x100)) {\n    val += this[offset + i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) checkOffset(offset, byteLength, this.length)\n\n  var i = byteLength\n  var mul = 1\n  var val = this[offset + --i]\n  while (i > 0 && (mul *= 0x100)) {\n    val += this[offset + --i] * mul\n  }\n  mul *= 0x80\n\n  if (val >= mul) val -= Math.pow(2, 8 * byteLength)\n\n  return val\n}\n\nBuffer.prototype.readInt8 = function readInt8 (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 1, this.length)\n  if (!(this[offset] & 0x80)) return (this[offset])\n  return ((0xff - this[offset] + 1) * -1)\n}\n\nBuffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset] | (this[offset + 1] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 2, this.length)\n  var val = this[offset + 1] | (this[offset] << 8)\n  return (val & 0x8000) ? val | 0xFFFF0000 : val\n}\n\nBuffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset]) |\n    (this[offset + 1] << 8) |\n    (this[offset + 2] << 16) |\n    (this[offset + 3] << 24)\n}\n\nBuffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n\n  return (this[offset] << 24) |\n    (this[offset + 1] << 16) |\n    (this[offset + 2] << 8) |\n    (this[offset + 3])\n}\n\nBuffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, true, 23, 4)\n}\n\nBuffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 4, this.length)\n  return ieee754.read(this, offset, false, 23, 4)\n}\n\nBuffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, true, 52, 8)\n}\n\nBuffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {\n  if (!noAssert) checkOffset(offset, 8, this.length)\n  return ieee754.read(this, offset, false, 52, 8)\n}\n\nfunction checkInt (buf, value, offset, ext, max, min) {\n  if (!Buffer.isBuffer(buf)) throw new TypeError('\"buffer\" argument must be a Buffer instance')\n  if (value > max || value < min) throw new RangeError('\"value\" argument is out of bounds')\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n}\n\nBuffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var mul = 1\n  var i = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  byteLength = byteLength | 0\n  if (!noAssert) {\n    var maxBytes = Math.pow(2, 8 * byteLength) - 1\n    checkInt(this, value, offset, byteLength, maxBytes, 0)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    this[offset + i] = (value / mul) & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nfunction objectWriteUInt16 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {\n    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>\n      (littleEndian ? i : 1 - i) * 8\n  }\n}\n\nBuffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nfunction objectWriteUInt32 (buf, value, offset, littleEndian) {\n  if (value < 0) value = 0xffffffff + value + 1\n  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {\n    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff\n  }\n}\n\nBuffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset + 3] = (value >>> 24)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 1] = (value >>> 8)\n    this[offset] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = 0\n  var mul = 1\n  var sub = 0\n  this[offset] = value & 0xFF\n  while (++i < byteLength && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) {\n    var limit = Math.pow(2, 8 * byteLength - 1)\n\n    checkInt(this, value, offset, byteLength, limit - 1, -limit)\n  }\n\n  var i = byteLength - 1\n  var mul = 1\n  var sub = 0\n  this[offset + i] = value & 0xFF\n  while (--i >= 0 && (mul *= 0x100)) {\n    if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {\n      sub = 1\n    }\n    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF\n  }\n\n  return offset + byteLength\n}\n\nBuffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)\n  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)\n  if (value < 0) value = 0xff + value + 1\n  this[offset] = (value & 0xff)\n  return offset + 1\n}\n\nBuffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n  } else {\n    objectWriteUInt16(this, value, offset, true)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 8)\n    this[offset + 1] = (value & 0xff)\n  } else {\n    objectWriteUInt16(this, value, offset, false)\n  }\n  return offset + 2\n}\n\nBuffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value & 0xff)\n    this[offset + 1] = (value >>> 8)\n    this[offset + 2] = (value >>> 16)\n    this[offset + 3] = (value >>> 24)\n  } else {\n    objectWriteUInt32(this, value, offset, true)\n  }\n  return offset + 4\n}\n\nBuffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {\n  value = +value\n  offset = offset | 0\n  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)\n  if (value < 0) value = 0xffffffff + value + 1\n  if (Buffer.TYPED_ARRAY_SUPPORT) {\n    this[offset] = (value >>> 24)\n    this[offset + 1] = (value >>> 16)\n    this[offset + 2] = (value >>> 8)\n    this[offset + 3] = (value & 0xff)\n  } else {\n    objectWriteUInt32(this, value, offset, false)\n  }\n  return offset + 4\n}\n\nfunction checkIEEE754 (buf, value, offset, ext, max, min) {\n  if (offset + ext > buf.length) throw new RangeError('Index out of range')\n  if (offset < 0) throw new RangeError('Index out of range')\n}\n\nfunction writeFloat (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 23, 4)\n  return offset + 4\n}\n\nBuffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {\n  return writeFloat(this, value, offset, false, noAssert)\n}\n\nfunction writeDouble (buf, value, offset, littleEndian, noAssert) {\n  if (!noAssert) {\n    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)\n  }\n  ieee754.write(buf, value, offset, littleEndian, 52, 8)\n  return offset + 8\n}\n\nBuffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, true, noAssert)\n}\n\nBuffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {\n  return writeDouble(this, value, offset, false, noAssert)\n}\n\n// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)\nBuffer.prototype.copy = function copy (target, targetStart, start, end) {\n  if (!start) start = 0\n  if (!end && end !== 0) end = this.length\n  if (targetStart >= target.length) targetStart = target.length\n  if (!targetStart) targetStart = 0\n  if (end > 0 && end < start) end = start\n\n  // Copy 0 bytes; we're done\n  if (end === start) return 0\n  if (target.length === 0 || this.length === 0) return 0\n\n  // Fatal error conditions\n  if (targetStart < 0) {\n    throw new RangeError('targetStart out of bounds')\n  }\n  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')\n  if (end < 0) throw new RangeError('sourceEnd out of bounds')\n\n  // Are we oob?\n  if (end > this.length) end = this.length\n  if (target.length - targetStart < end - start) {\n    end = target.length - targetStart + start\n  }\n\n  var len = end - start\n  var i\n\n  if (this === target && start < targetStart && targetStart < end) {\n    // descending copy from end\n    for (i = len - 1; i >= 0; --i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {\n    // ascending copy from start\n    for (i = 0; i < len; ++i) {\n      target[i + targetStart] = this[i + start]\n    }\n  } else {\n    Uint8Array.prototype.set.call(\n      target,\n      this.subarray(start, start + len),\n      targetStart\n    )\n  }\n\n  return len\n}\n\n// Usage:\n//    buffer.fill(number[, offset[, end]])\n//    buffer.fill(buffer[, offset[, end]])\n//    buffer.fill(string[, offset[, end]][, encoding])\nBuffer.prototype.fill = function fill (val, start, end, encoding) {\n  // Handle string cases:\n  if (typeof val === 'string') {\n    if (typeof start === 'string') {\n      encoding = start\n      start = 0\n      end = this.length\n    } else if (typeof end === 'string') {\n      encoding = end\n      end = this.length\n    }\n    if (val.length === 1) {\n      var code = val.charCodeAt(0)\n      if (code < 256) {\n        val = code\n      }\n    }\n    if (encoding !== undefined && typeof encoding !== 'string') {\n      throw new TypeError('encoding must be a string')\n    }\n    if (typeof encoding === 'string' && !Buffer.isEncoding(encoding)) {\n      throw new TypeError('Unknown encoding: ' + encoding)\n    }\n  } else if (typeof val === 'number') {\n    val = val & 255\n  }\n\n  // Invalid ranges are not set to a default, so can range check early.\n  if (start < 0 || this.length < start || this.length < end) {\n    throw new RangeError('Out of range index')\n  }\n\n  if (end <= start) {\n    return this\n  }\n\n  start = start >>> 0\n  end = end === undefined ? this.length : end >>> 0\n\n  if (!val) val = 0\n\n  var i\n  if (typeof val === 'number') {\n    for (i = start; i < end; ++i) {\n      this[i] = val\n    }\n  } else {\n    var bytes = Buffer.isBuffer(val)\n      ? val\n      : utf8ToBytes(new Buffer(val, encoding).toString())\n    var len = bytes.length\n    for (i = 0; i < end - start; ++i) {\n      this[i + start] = bytes[i % len]\n    }\n  }\n\n  return this\n}\n\n// HELPER FUNCTIONS\n// ================\n\nvar INVALID_BASE64_RE = /[^+\\/0-9A-Za-z-_]/g\n\nfunction base64clean (str) {\n  // Node strips out invalid characters like \\n and \\t from the string, base64-js does not\n  str = stringtrim(str).replace(INVALID_BASE64_RE, '')\n  // Node converts strings with length < 2 to ''\n  if (str.length < 2) return ''\n  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not\n  while (str.length % 4 !== 0) {\n    str = str + '='\n  }\n  return str\n}\n\nfunction stringtrim (str) {\n  if (str.trim) return str.trim()\n  return str.replace(/^\\s+|\\s+$/g, '')\n}\n\nfunction toHex (n) {\n  if (n < 16) return '0' + n.toString(16)\n  return n.toString(16)\n}\n\nfunction utf8ToBytes (string, units) {\n  units = units || Infinity\n  var codePoint\n  var length = string.length\n  var leadSurrogate = null\n  var bytes = []\n\n  for (var i = 0; i < length; ++i) {\n    codePoint = string.charCodeAt(i)\n\n    // is surrogate component\n    if (codePoint > 0xD7FF && codePoint < 0xE000) {\n      // last char was a lead\n      if (!leadSurrogate) {\n        // no lead yet\n        if (codePoint > 0xDBFF) {\n          // unexpected trail\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        } else if (i + 1 === length) {\n          // unpaired lead\n          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n          continue\n        }\n\n        // valid lead\n        leadSurrogate = codePoint\n\n        continue\n      }\n\n      // 2 leads in a row\n      if (codePoint < 0xDC00) {\n        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n        leadSurrogate = codePoint\n        continue\n      }\n\n      // valid surrogate pair\n      codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000\n    } else if (leadSurrogate) {\n      // valid bmp char, but last char was a lead\n      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)\n    }\n\n    leadSurrogate = null\n\n    // encode utf8\n    if (codePoint < 0x80) {\n      if ((units -= 1) < 0) break\n      bytes.push(codePoint)\n    } else if (codePoint < 0x800) {\n      if ((units -= 2) < 0) break\n      bytes.push(\n        codePoint >> 0x6 | 0xC0,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x10000) {\n      if ((units -= 3) < 0) break\n      bytes.push(\n        codePoint >> 0xC | 0xE0,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else if (codePoint < 0x110000) {\n      if ((units -= 4) < 0) break\n      bytes.push(\n        codePoint >> 0x12 | 0xF0,\n        codePoint >> 0xC & 0x3F | 0x80,\n        codePoint >> 0x6 & 0x3F | 0x80,\n        codePoint & 0x3F | 0x80\n      )\n    } else {\n      throw new Error('Invalid code point')\n    }\n  }\n\n  return bytes\n}\n\nfunction asciiToBytes (str) {\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    // Node's code seems to be doing this and not & 0x7F..\n    byteArray.push(str.charCodeAt(i) & 0xFF)\n  }\n  return byteArray\n}\n\nfunction utf16leToBytes (str, units) {\n  var c, hi, lo\n  var byteArray = []\n  for (var i = 0; i < str.length; ++i) {\n    if ((units -= 2) < 0) break\n\n    c = str.charCodeAt(i)\n    hi = c >> 8\n    lo = c % 256\n    byteArray.push(lo)\n    byteArray.push(hi)\n  }\n\n  return byteArray\n}\n\nfunction base64ToBytes (str) {\n  return base64.toByteArray(base64clean(str))\n}\n\nfunction blitBuffer (src, dst, offset, length) {\n  for (var i = 0; i < length; ++i) {\n    if ((i + offset >= dst.length) || (i >= src.length)) break\n    dst[i + offset] = src[i]\n  }\n  return i\n}\n\nfunction isnan (val) {\n  return val !== val // eslint-disable-line no-self-compare\n}\n","var g;\n\n// This works in non-strict mode\ng = (function() {\n\treturn this;\n})();\n\ntry {\n\t// This works if eval is allowed (see CSP)\n\tg = g || new Function(\"return this\")();\n} catch (e) {\n\t// This works if the window reference is available\n\tif (typeof window === \"object\") g = window;\n}\n\n// g can still be undefined, but nothing to do about it...\n// We return undefined, instead of nothing here, so it's\n// easier to handle this case. if(!global) { ...}\n\nmodule.exports = g;\n","'use strict'\n\nexports.byteLength = byteLength\nexports.toByteArray = toByteArray\nexports.fromByteArray = fromByteArray\n\nvar lookup = []\nvar revLookup = []\nvar Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array\n\nvar code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'\nfor (var i = 0, len = code.length; i < len; ++i) {\n  lookup[i] = code[i]\n  revLookup[code.charCodeAt(i)] = i\n}\n\n// Support decoding URL-safe base64 strings, as Node.js does.\n// See: https://en.wikipedia.org/wiki/Base64#URL_applications\nrevLookup['-'.charCodeAt(0)] = 62\nrevLookup['_'.charCodeAt(0)] = 63\n\nfunction getLens (b64) {\n  var len = b64.length\n\n  if (len % 4 > 0) {\n    throw new Error('Invalid string. Length must be a multiple of 4')\n  }\n\n  // Trim off extra bytes after placeholder bytes are found\n  // See: https://github.com/beatgammit/base64-js/issues/42\n  var validLen = b64.indexOf('=')\n  if (validLen === -1) validLen = len\n\n  var placeHoldersLen = validLen === len\n    ? 0\n    : 4 - (validLen % 4)\n\n  return [validLen, placeHoldersLen]\n}\n\n// base64 is 4/3 + up to two characters of the original data\nfunction byteLength (b64) {\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction _byteLength (b64, validLen, placeHoldersLen) {\n  return ((validLen + placeHoldersLen) * 3 / 4) - placeHoldersLen\n}\n\nfunction toByteArray (b64) {\n  var tmp\n  var lens = getLens(b64)\n  var validLen = lens[0]\n  var placeHoldersLen = lens[1]\n\n  var arr = new Arr(_byteLength(b64, validLen, placeHoldersLen))\n\n  var curByte = 0\n\n  // if there are placeholders, only get up to the last complete 4 chars\n  var len = placeHoldersLen > 0\n    ? validLen - 4\n    : validLen\n\n  for (var i = 0; i < len; i += 4) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 18) |\n      (revLookup[b64.charCodeAt(i + 1)] << 12) |\n      (revLookup[b64.charCodeAt(i + 2)] << 6) |\n      revLookup[b64.charCodeAt(i + 3)]\n    arr[curByte++] = (tmp >> 16) & 0xFF\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 2) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 2) |\n      (revLookup[b64.charCodeAt(i + 1)] >> 4)\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  if (placeHoldersLen === 1) {\n    tmp =\n      (revLookup[b64.charCodeAt(i)] << 10) |\n      (revLookup[b64.charCodeAt(i + 1)] << 4) |\n      (revLookup[b64.charCodeAt(i + 2)] >> 2)\n    arr[curByte++] = (tmp >> 8) & 0xFF\n    arr[curByte++] = tmp & 0xFF\n  }\n\n  return arr\n}\n\nfunction tripletToBase64 (num) {\n  return lookup[num >> 18 & 0x3F] +\n    lookup[num >> 12 & 0x3F] +\n    lookup[num >> 6 & 0x3F] +\n    lookup[num & 0x3F]\n}\n\nfunction encodeChunk (uint8, start, end) {\n  var tmp\n  var output = []\n  for (var i = start; i < end; i += 3) {\n    tmp =\n      ((uint8[i] << 16) & 0xFF0000) +\n      ((uint8[i + 1] << 8) & 0xFF00) +\n      (uint8[i + 2] & 0xFF)\n    output.push(tripletToBase64(tmp))\n  }\n  return output.join('')\n}\n\nfunction fromByteArray (uint8) {\n  var tmp\n  var len = uint8.length\n  var extraBytes = len % 3 // if we have 1 byte left, pad 2 bytes\n  var parts = []\n  var maxChunkLength = 16383 // must be multiple of 3\n\n  // go through the array every three bytes, we'll deal with trailing stuff later\n  for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {\n    parts.push(encodeChunk(\n      uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)\n    ))\n  }\n\n  // pad the end with zeros, but make sure to not forget the extra bytes\n  if (extraBytes === 1) {\n    tmp = uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 2] +\n      lookup[(tmp << 4) & 0x3F] +\n      '=='\n    )\n  } else if (extraBytes === 2) {\n    tmp = (uint8[len - 2] << 8) + uint8[len - 1]\n    parts.push(\n      lookup[tmp >> 10] +\n      lookup[(tmp >> 4) & 0x3F] +\n      lookup[(tmp << 2) & 0x3F] +\n      '='\n    )\n  }\n\n  return parts.join('')\n}\n","exports.read = function (buffer, offset, isLE, mLen, nBytes) {\n  var e, m\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var nBits = -7\n  var i = isLE ? (nBytes - 1) : 0\n  var d = isLE ? -1 : 1\n  var s = buffer[offset + i]\n\n  i += d\n\n  e = s & ((1 << (-nBits)) - 1)\n  s >>= (-nBits)\n  nBits += eLen\n  for (; nBits > 0; e = (e * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  m = e & ((1 << (-nBits)) - 1)\n  e >>= (-nBits)\n  nBits += mLen\n  for (; nBits > 0; m = (m * 256) + buffer[offset + i], i += d, nBits -= 8) {}\n\n  if (e === 0) {\n    e = 1 - eBias\n  } else if (e === eMax) {\n    return m ? NaN : ((s ? -1 : 1) * Infinity)\n  } else {\n    m = m + Math.pow(2, mLen)\n    e = e - eBias\n  }\n  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)\n}\n\nexports.write = function (buffer, value, offset, isLE, mLen, nBytes) {\n  var e, m, c\n  var eLen = (nBytes * 8) - mLen - 1\n  var eMax = (1 << eLen) - 1\n  var eBias = eMax >> 1\n  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)\n  var i = isLE ? 0 : (nBytes - 1)\n  var d = isLE ? 1 : -1\n  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0\n\n  value = Math.abs(value)\n\n  if (isNaN(value) || value === Infinity) {\n    m = isNaN(value) ? 1 : 0\n    e = eMax\n  } else {\n    e = Math.floor(Math.log(value) / Math.LN2)\n    if (value * (c = Math.pow(2, -e)) < 1) {\n      e--\n      c *= 2\n    }\n    if (e + eBias >= 1) {\n      value += rt / c\n    } else {\n      value += rt * Math.pow(2, 1 - eBias)\n    }\n    if (value * c >= 2) {\n      e++\n      c /= 2\n    }\n\n    if (e + eBias >= eMax) {\n      m = 0\n      e = eMax\n    } else if (e + eBias >= 1) {\n      m = ((value * c) - 1) * Math.pow(2, mLen)\n      e = e + eBias\n    } else {\n      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)\n      e = 0\n    }\n  }\n\n  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}\n\n  e = (e << mLen) | m\n  eLen += mLen\n  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}\n\n  buffer[offset + i - d] |= s * 128\n}\n","var toString = {}.toString;\n\nmodule.exports = Array.isArray || function (arr) {\n  return toString.call(arr) == '[object Array]';\n};\n","(function() {\n  var base64map\n      = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/',\n\n  crypt = {\n    // Bit-wise rotation left\n    rotl: function(n, b) {\n      return (n << b) | (n >>> (32 - b));\n    },\n\n    // Bit-wise rotation right\n    rotr: function(n, b) {\n      return (n << (32 - b)) | (n >>> b);\n    },\n\n    // Swap big-endian to little-endian and vice versa\n    endian: function(n) {\n      // If number given, swap endian\n      if (n.constructor == Number) {\n        return crypt.rotl(n, 8) & 0x00FF00FF | crypt.rotl(n, 24) & 0xFF00FF00;\n      }\n\n      // Else, assume array and swap all items\n      for (var i = 0; i < n.length; i++)\n        n[i] = crypt.endian(n[i]);\n      return n;\n    },\n\n    // Generate an array of any length of random bytes\n    randomBytes: function(n) {\n      for (var bytes = []; n > 0; n--)\n        bytes.push(Math.floor(Math.random() * 256));\n      return bytes;\n    },\n\n    // Convert a byte array to big-endian 32-bit words\n    bytesToWords: function(bytes) {\n      for (var words = [], i = 0, b = 0; i < bytes.length; i++, b += 8)\n        words[b >>> 5] |= bytes[i] << (24 - b % 32);\n      return words;\n    },\n\n    // Convert big-endian 32-bit words to a byte array\n    wordsToBytes: function(words) {\n      for (var bytes = [], b = 0; b < words.length * 32; b += 8)\n        bytes.push((words[b >>> 5] >>> (24 - b % 32)) & 0xFF);\n      return bytes;\n    },\n\n    // Convert a byte array to a hex string\n    bytesToHex: function(bytes) {\n      for (var hex = [], i = 0; i < bytes.length; i++) {\n        hex.push((bytes[i] >>> 4).toString(16));\n        hex.push((bytes[i] & 0xF).toString(16));\n      }\n      return hex.join('');\n    },\n\n    // Convert a hex string to a byte array\n    hexToBytes: function(hex) {\n      for (var bytes = [], c = 0; c < hex.length; c += 2)\n        bytes.push(parseInt(hex.substr(c, 2), 16));\n      return bytes;\n    },\n\n    // Convert a byte array to a base-64 string\n    bytesToBase64: function(bytes) {\n      for (var base64 = [], i = 0; i < bytes.length; i += 3) {\n        var triplet = (bytes[i] << 16) | (bytes[i + 1] << 8) | bytes[i + 2];\n        for (var j = 0; j < 4; j++)\n          if (i * 8 + j * 6 <= bytes.length * 8)\n            base64.push(base64map.charAt((triplet >>> 6 * (3 - j)) & 0x3F));\n          else\n            base64.push('=');\n      }\n      return base64.join('');\n    },\n\n    // Convert a base-64 string to a byte array\n    base64ToBytes: function(base64) {\n      // Remove non-base-64 characters\n      base64 = base64.replace(/[^A-Z0-9+\\/]/ig, '');\n\n      for (var bytes = [], i = 0, imod4 = 0; i < base64.length;\n          imod4 = ++i % 4) {\n        if (imod4 == 0) continue;\n        bytes.push(((base64map.indexOf(base64.charAt(i - 1))\n            & (Math.pow(2, -2 * imod4 + 8) - 1)) << (imod4 * 2))\n            | (base64map.indexOf(base64.charAt(i)) >>> (6 - imod4 * 2)));\n      }\n      return bytes;\n    }\n  };\n\n  module.exports = crypt;\n})();\n"],"sourceRoot":""}